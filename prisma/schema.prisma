// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  tenantId  String   @map("orgId") @db.ObjectId
  email     String   @unique
  password  String
  //session   Session?
  firstName String?
  lastName  String?
  role      String   @default("member")
  isAdmin   Boolean  @default(false)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  resetPassLinks ResetPassLinks[]

  org Org @relation(fields: [tenantId], references: [id])

  @@map("users")
}

type ResetPassLinks {
  email         String
  token         String
  used          Boolean
  resendEmailId String
  expiresAt     DateTime
}

model Org {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  companyName            String    @unique
  domain                 String
  isUsingCustomDomain    Boolean   @default(false)
  address                Address?
  invites                Invites[]
  roles                  Roles[]
  stripeCustomerId       String?   @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  resendDomainId         String?
  updatedAt              DateTime  @updatedAt
  createdAt              DateTime  @default(now())

  users           User[]
  surveys         Survey[]
  SurveyData      SurveyData[]
  SurveySendGroup SurveySendGroup[]
  SurveySendEmail SurveySendEmail[]

  @@map("orgs")
}

type Invites {
  email         String
  token         String
  used          Boolean  @default(false)
  resendEmailId String
  expiresAt     DateTime
}

// Address is an embedded document in Org
type Address {
  street String
  city   String
  state  String
  zip    String
}

type Roles {
  name String
}

model Survey {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  tenantId          String  @map("orgId") @db.ObjectId
  surveyTitle       String
  surveyDescription String?
  surveyState       State   @default(DRAFT)
  backgroundColor   String  @default("#ffffff")
  textColor         String  @default("#000000")
  primaryColor      String  @default("#F4E300")

  fields    Fields[]
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  org             Org               @relation(fields: [tenantId], references: [id])
  SurveyData      SurveyData[]
  SurveySendGroup SurveySendGroup[]

  @@map("surveys")
}

enum State {
  DRAFT
  PUBLISHED
  ARCHIVED
}

type Fields {
  id                String
  fieldQuestion     String
  fieldType         String //TODO:: will be enum for Layout field or Survey Field. surveyFields hold questions.
  placeholder       String?
  helperText        String?
  options           Option[] // Optional; only needed for radio, checkbox, or select fields
  required          Boolean  @default(false)
  sentimentAnalysis Boolean  @default(false)
  rows              Int?
  position          Int
}

type Option {
  value String // The actual value to be submitted
}

model SurveyData {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  surveyId          String          @db.ObjectId
  tenantId          String          @map("orgId") @db.ObjectId
  token             String          @unique
  resendEmailId     String          @default("NOT_SET")
  openedEmail       Boolean         @default(false)
  clickedSurveyLink Boolean         @default(false)
  responses         Response[]
  attachedUsers     AttachedUsers[]
  expirationDate    ExpiryEnum
  submittedAt       DateTime?
  createdAt         DateTime        @default(now())

  survey Survey @relation(fields: [surveyId], references: [id])
  org    Org    @relation(fields: [tenantId], references: [id])
}

type Response {
  question  String
  fieldType String //this will be an enum later!
  answer    String
}

model SurveySendGroup {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  surveyId         String          @db.ObjectId
  tenantId         String          @map("orgId") @db.ObjectId
  scheduledSend    DateTime
  intervalTiming   IntervalEnum
  expirationDate   ExpiryEnum
  attachedUsers    AttachedUsers[]
  activeEmailCount Int             @default(0)
  isArchived       Boolean         @default(false)
  updatedAt        DateTime        @updatedAt
  createdAt        DateTime        @default(now())

  survey Survey @relation(fields: [surveyId], references: [id])
  org    Org    @relation(fields: [tenantId], references: [id])

  SurveySendEmail SurveySendEmail[]

  @@unique([surveyId, tenantId, id])
}

type AttachedUsers {
  userId String
}

model SurveySendEmail {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  surveySendGroupId String  @db.ObjectId
  tenantId          String  @map("orgId") @db.ObjectId
  email             String
  isFinished        Boolean @default(false)

  surveySendGroup SurveySendGroup @relation(fields: [surveySendGroupId], references: [id])
  org             Org             @relation(fields: [tenantId], references: [id])

  @@unique([email, surveySendGroupId, tenantId])
  @@index([isFinished])
  @@index([surveySendGroupId, tenantId])
}

enum IntervalEnum {
  ONCE
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  SEMIANNUALY
  ANNUALY
}

enum ExpiryEnum {
  AFTER_1_DAY
  AFTER_7_DAYS
  AFTER_14_DAYS
}
