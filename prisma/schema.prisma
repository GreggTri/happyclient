// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  tenantId  String   @map("orgId") @db.ObjectId
  email     String   @unique
  password  String
  //session   Session?
  firstName String?
  lastName  String?
  role      String   @default("member")
  isAdmin   Boolean  @default(false)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  resetPassLinks ResetPassLinks[]

  org Org @relation(fields: [tenantId], references: [id])

  @@map("users")
}

type ResetPassLinks {
  email         String
  token         String
  used          Boolean
  resendEmailId String
  expiresAt     DateTime
}

model Org {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  companyName            String
  address                Address?
  invites                Invites[]
  roles                  Roles[]
  stripeCustomerId       String?   @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  resendDomainId         String?   @unique
  updatedAt              DateTime  @updatedAt
  createdAt              DateTime  @default(now())

  users User[]

  @@map("orgs")
}

type Invites {
  email         String
  token         String
  used          Boolean  @default(false)
  resendEmailId String
  expiresAt     DateTime
}

// Address is an embedded document in Org
type Address {
  street String
  city   String
  state  String
  zip    String
}

type Roles {
  name String
}
